{"version":3,"file":"ng-inactivity-timer.js.map","sources":["ng://ng-inactivity-timer/lib/activity-monitor.token.ts","ng://ng-inactivity-timer/lib/inactivity-config.token.ts","ng://ng-inactivity-timer/lib/inactivity-timer.service.ts"],"sourcesContent":["import { InjectionToken } from '@angular/core';\nimport { ActivityMonitor } from './activity-monitor.interface';\n\nexport const ACTIVITY_MONITOR = new InjectionToken<ActivityMonitor>(\n  'Activity Monitor'\n);\n","import { InjectionToken } from '@angular/core';\nimport { InactivityConfig } from './inactivity-config.interface';\n\nexport const INACTIVITY_CONFIG = new InjectionToken<InactivityConfig>(\n  'Inactivity Configuration'\n);\n","import {\n  interval as observableInterval,\n  BehaviorSubject,\n  Observable,\n  Subject,\n  of,\n  timer,\n  merge\n} from 'rxjs';\nimport { ActivityMonitor } from './activity-monitor.interface';\nimport { ACTIVITY_MONITOR } from './activity-monitor.token';\nimport { InactivityConfig } from './inactivity-config.interface';\nimport { INACTIVITY_CONFIG } from './inactivity-config.token';\nimport { Inject, Injectable, Optional } from '@angular/core';\nimport {\n  switchMap,\n  throttle,\n  map,\n  startWith,\n  filter,\n  takeUntil\n} from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n  deps: [INACTIVITY_CONFIG, ACTIVITY_MONITOR]\n})\nexport class InactivityTimerService {\n  private timeout$: Observable<Date | never>;\n  private monitor$ = new BehaviorSubject<boolean>(true);\n  private artificialActivity$ = new Subject<void>();\n\n  constructor(\n    @Inject(INACTIVITY_CONFIG) private config: InactivityConfig,\n    @Optional()\n    @Inject(ACTIVITY_MONITOR)\n    private monitor: ActivityMonitor\n  ) {\n    // Merge all monitors together, and activate them via register()\n    this.timeout$ = this.monitor$.pipe(\n      filter(x => !!x),\n      switchMap(m => {\n        return merge(this.monitor.getMonitor(), this.artificialActivity$).pipe(\n          throttle(() => observableInterval(500)), // Throttle - to stop spamming\n          startWith(undefined), // Trigger observable immediately\n          map(() => {\n            const d = new Date();\n            d.setMinutes(d.getMinutes() + config.inactivityTime);\n            return d;\n          }),\n          takeUntil(this.monitor$.pipe(filter(x => !x)))\n        );\n      })\n    );\n  }\n\n  /**\n   * Emits Timeout objects describing current timeout state\n   * @returns Observable<Timeout>\n   */\n  public getTimeOut(): Observable<Timeout> {\n    return this.timeout$.pipe(\n      switchMap((date: Date) => {\n        return timer(0, 60000).pipe(\n          switchMap(() => {\n            const f = new Date();\n            return of({\n              showWarning: this.config.warningTime\n                ? f.getTime() + this.config.warningTime > date.getTime()\n                : false,\n              timedOut: f.getTime() > date.getTime(),\n              timeLeft: date.getTime() - f.getTime()\n            });\n          })\n        );\n      })\n    );\n  }\n\n  /**\n   * Starts listening for activity.\n   * @param activate=false. If true will reset the activity timer as any other activity.\n   * @returns void\n   */\n  public startMonitor(activate = false): void {\n    this.monitor$.next(true);\n    if (activate) {\n      this.activate();\n    }\n  }\n\n  /**\n   * Stops listening for activity.\n   * @returns void\n   */\n  public stopMonitor(): void {\n    this.monitor$.next(false);\n  }\n\n  /**\n   * Provides a programmatic way of simulating activity.\n   * Will reset the activity timer as any other activity.\n   */\n  public activate(): void {\n    this.artificialActivity$.next(undefined);\n  }\n}\n\nexport interface Timeout {\n  showWarning: boolean;\n  timedOut: boolean;\n  timeLeft: number;\n}\n"],"names":["observableInterval"],"mappings":";;;;;;;;;;;;;AAAA;AAGA,MAAa,gBAAgB,GAAG,IAAI,cAAc,CAChD,kBAAkB,CACnB;;;;;;;;;;;ACLD;AAGA,MAAa,iBAAiB,GAAG,IAAI,cAAc,CACjD,0BAA0B,CAC3B;;;;;;ACLD,MA2Ba,sBAAsB;;;;;IAKjC,YACqC,MAAwB,EAGnD,OAAwB;QAHG,WAAM,GAAN,MAAM,CAAkB;QAGnD,YAAO,GAAP,OAAO,CAAiB;QAP1B,aAAQ,GAAG,IAAI,eAAe,CAAU,IAAI,CAAC,CAAC;QAC9C,wBAAmB,GAAG,IAAI,OAAO,EAAQ,CAAC;;QAShD,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,CAChC,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,EAChB,SAAS,CAAC,CAAC;YACT,OAAO,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,UAAU,EAAE,EAAE,IAAI,CAAC,mBAAmB,CAAC,CAAC,IAAI,CACpE,QAAQ,CAAC,MAAMA,QAAkB,CAAC,GAAG,CAAC,CAAC;YACvC,SAAS,CAAC,SAAS,CAAC;YACpB,GAAG,CAAC;;sBACI,CAAC,GAAG,IAAI,IAAI,EAAE;gBACpB,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,UAAU,EAAE,GAAG,MAAM,CAAC,cAAc,CAAC,CAAC;gBACrD,OAAO,CAAC,CAAC;aACV,CAAC,EACF,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAC/C,CAAC;SACH,CAAC,CACH,CAAC;KACH;;;;;IAMM,UAAU;QACf,OAAO,IAAI,CAAC,QAAQ,CAAC,IAAI,CACvB,SAAS,CAAC,CAAC,IAAU;YACnB,OAAO,KAAK,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC,IAAI,CACzB,SAAS,CAAC;;sBACF,CAAC,GAAG,IAAI,IAAI,EAAE;gBACpB,OAAO,EAAE,CAAC;oBACR,WAAW,EAAE,IAAI,CAAC,MAAM,CAAC,WAAW;0BAChC,CAAC,CAAC,OAAO,EAAE,GAAG,IAAI,CAAC,MAAM,CAAC,WAAW,GAAG,IAAI,CAAC,OAAO,EAAE;0BACtD,KAAK;oBACT,QAAQ,EAAE,CAAC,CAAC,OAAO,EAAE,GAAG,IAAI,CAAC,OAAO,EAAE;oBACtC,QAAQ,EAAE,IAAI,CAAC,OAAO,EAAE,GAAG,CAAC,CAAC,OAAO,EAAE;iBACvC,CAAC,CAAC;aACJ,CAAC,CACH,CAAC;SACH,CAAC,CACH,CAAC;KACH;;;;;;IAOM,YAAY,CAAC,QAAQ,GAAG,KAAK;QAClC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACzB,IAAI,QAAQ,EAAE;YACZ,IAAI,CAAC,QAAQ,EAAE,CAAC;SACjB;KACF;;;;;IAMM,WAAW;QAChB,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;KAC3B;;;;;;IAMM,QAAQ;QACb,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;KAC1C;;;YAlFF,UAAU,SAAC;gBACV,UAAU,EAAE,MAAM;gBAClB,IAAI,EAAE,CAAC,iBAAiB,EAAE,gBAAgB,CAAC;aAC5C;;;;4CAOI,MAAM,SAAC,iBAAiB;4CACxB,QAAQ,YACR,MAAM,SAAC,gBAAgB;;;;;;;;;;;;;;;;"}
